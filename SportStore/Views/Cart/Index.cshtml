@model List<Cart>
@{
    ViewData["Title"] = "Giỏ hàng";
    Layout = "_CustomerLayout";
    decimal totalAmount = 0;
}

<div class="container py-5">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h1 class="h3 mb-0">Giỏ hàng của bạn</h1>
        </div>
        <div class="card-body">
            <div id="cartMessage" class="alert" style="display: none;"></div>
            
            @if (Model.Count > 0)
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Sản phẩm</th>
                                <th>Giá</th>
                                <th>Số lượng</th>
                                <th>Thành tiền</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                var itemTotal = item.Price * item.Quantity;
                                totalAmount += itemTotal;

                                <tr id="cart-item-@item.Id">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="@item.Product.Image" alt="@item.Product.Name" class="img-thumbnail me-3" style="width: 80px; height: 80px; object-fit: cover;">
                                            <div>
                                                <h5 class="mb-0">@item.Product.Name</h5>
                                                <small class="text-muted">Còn lại: @item.Product.Quantity sản phẩm</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@item.Price.ToString("N0") VNĐ</td>
                                    <td>
                                        <div class="input-group" style="width: 90px;">
                                            <button class="btn btn-outline-secondary btn-sm p-0" type="button" onclick="updateQuantity(@item.Id, -1)" style="width: 25px; height: 25px; line-height: 1;">
                                                <i class="bi bi-dash"></i>
                                            </button>
                                            <input type="number" class="form-control text-center p-0" value="@item.Quantity" min="1" max="@item.Product.Quantity" id="quantity-@item.Id" onchange="updateCart(@item.Id, this.value)" style="height: 25px; font-size: 0.9rem;">
                                            <button class="btn btn-outline-secondary btn-sm p-0" type="button" onclick="updateQuantity(@item.Id, 1)" style="width: 25px; height: 25px; line-height: 1;">
                                                <i class="bi bi-plus"></i>
                                            </button>
                                        </div>
                                    </td>
                                    <td id="item-total-@item.Id">@itemTotal.ToString("N0") VNĐ</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" class="text-end"><strong>Tổng cộng:</strong></td>
                                <td id="cart-total">@totalAmount.ToString("N0") VNĐ</td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Tiếp tục mua sắm
                    </a>
                    <div>
                        <button class="btn btn-outline-danger me-2" onclick="clearCart()">
                            <i class="bi bi-x-circle"></i> Xóa giỏ hàng
                        </button>
                        <a href="@Url.Action("Index", "Checkout")" class="btn btn-primary">
                            <i class="bi bi-credit-card"></i> Thanh toán
                        </a>
                    </div>
                </div>
                
                <div class="alert alert-info mt-4">
                    <i class="bi bi-info-circle"></i> Lưu ý: Số lượng sản phẩm sẽ được kiểm tra lại khi thanh toán để đảm bảo tính sẵn có.
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-cart-x" style="font-size: 5rem; color: #ccc;"></i>
                    <h3 class="mt-4">Giỏ hàng của bạn đang trống</h3>
                    <p class="text-muted">Hãy thêm sản phẩm vào giỏ hàng để tiếp tục mua sắm</p>
                    <a href="@Url.Action("Index", "Home")" class="btn btn-primary mt-3">
                        <i class="bi bi-arrow-left"></i> Tiếp tục mua sắm
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showMessage(message, type) {
            const cartMessage = document.getElementById('cartMessage');
            cartMessage.className = `alert alert-${type}`;
            cartMessage.style.display = 'block';
            cartMessage.innerHTML = message;
            
            setTimeout(() => {
                cartMessage.style.display = 'none';
            }, 3000);
        }
        
        function updateQuantity(cartId, change) {
            const quantityInput = document.getElementById(`quantity-${cartId}`);
            let newQuantity = parseInt(quantityInput.value) + change;
            
            if (newQuantity < 1) newQuantity = 1;
            if (newQuantity > parseInt(quantityInput.max)) newQuantity = parseInt(quantityInput.max);
            
            quantityInput.value = newQuantity;
            updateCart(cartId, newQuantity);
        }
        
        function updateCart(cartId, quantity) {
            const quantityInput = document.getElementById(`quantity-${cartId}`);
            quantityInput.disabled = true;
            
            fetch('/Cart/UpdateCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `cartId=${cartId}&quantity=${quantity}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the item total
                    const price = parseFloat(document.querySelector(`#cart-item-${cartId} td:nth-child(2)`).textContent.replace(/[^0-9.-]+/g, ''));
                    const itemTotal = price * quantity;
                    document.getElementById(`item-total-${cartId}`).textContent = itemTotal.toLocaleString() + ' VNĐ';
                    
                    // Update the cart total
                    let total = 0;
                    document.querySelectorAll('tbody tr').forEach(row => {
                        const itemTotal = parseFloat(row.querySelector('td:nth-child(4)').textContent.replace(/[^0-9.-]+/g, ''));
                        total += itemTotal;
                    });
                    document.getElementById('cart-total').textContent = total.toLocaleString() + ' VNĐ';
                    
                    showMessage(data.message, 'success');
                } else {
                    showMessage(data.message, 'danger');
                    // Reset to previous value
                    quantityInput.value = quantityInput.defaultValue;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Có lỗi xảy ra khi cập nhật giỏ hàng', 'danger');
                // Reset to previous value
                quantityInput.value = quantityInput.defaultValue;
            })
            .finally(() => {
                quantityInput.disabled = false;
            });
        }
        
        function removeFromCart(cartId) {
            if (confirm('Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                const row = document.getElementById(`cart-item-${cartId}`);
                row.style.opacity = '0.5';
                
                fetch(`/Cart/RemoveFromCart?cartId=${cartId}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        row.remove();
                        
                        // Check if cart is empty
                        const cartItems = document.querySelectorAll('tbody tr');
                        if (cartItems.length === 0) {
                            location.reload();
                        } else {
                            // Update the cart total
                            let total = 0;
                            document.querySelectorAll('tbody tr').forEach(row => {
                                const itemTotal = parseFloat(row.querySelector('td:nth-child(4)').textContent.replace(/[^0-9.-]+/g, ''));
                                total += itemTotal;
                            });
                            document.getElementById('cart-total').textContent = total.toLocaleString() + ' VNĐ';
                            
                            // Update cart count in navbar if it exists
                            const cartCount = document.getElementById('cartCount');
                            if (cartCount) {
                                const currentCount = parseInt(cartCount.textContent) || 0;
                                cartCount.textContent = currentCount - 1;
                            }
                            
                            showMessage(data.message, 'success');
                        }
                    } else {
                        showMessage(data.message, 'danger');
                        row.style.opacity = '1';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Có lỗi xảy ra khi xóa sản phẩm khỏi giỏ hàng', 'danger');
                    row.style.opacity = '1';
                });
            }
        }
        
        function clearCart() {
            if (confirm('Bạn có chắc chắn muốn xóa tất cả sản phẩm khỏi giỏ hàng?')) {
                const tbody = document.querySelector('tbody');
                tbody.style.opacity = '0.5';
                
                fetch('/Cart/ClearCart', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        showMessage(data.message, 'danger');
                        tbody.style.opacity = '1';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Có lỗi xảy ra khi xóa giỏ hàng', 'danger');
                    tbody.style.opacity = '1';
                });
            }
        }
    </script>
} 